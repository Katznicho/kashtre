name: Deploy Staging Branch to Hostinger (Root)

on:
  push:
    branches:
      - staging

jobs:
  deploy:
    name: Deploy Staging Branch
    runs-on: ubuntu-latest
    env:
      ACTIONS_RUNNER_DEBUG: true
      ACTIONS_STEP_DEBUG: true

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up PHP
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, bcmath, ctype, json, tokenizer, curl
          coverage: none

      # Step 3: Install Composer dependencies
      - name: Install Composer dependencies
        run: composer install --no-dev --optimize-autoloader --no-interaction --ignore-platform-reqs

      # Step 4: Install sshpass
      - name: Install sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass || { echo "Failed to install sshpass"; exit 1; }
          sshpass -v || { echo "sshpass not found after installation"; exit 1; }

      # Step 5: Test SSH Connection
      - name: Test SSH Connection
        run: |
          sshpass -p "${{ secrets.FTP_PASSWORD }}" ssh -o StrictHostKeyChecking=no -p 65002 ${{ secrets.FTP_USERNAME }}@${{ secrets.FTP_SERVER }} whoami
          sshpass -p "${{ secrets.FTP_PASSWORD }}" ssh -o StrictHostKeyChecking=no -p 65002 ${{ secrets.FTP_USERNAME }}@${{ secrets.FTP_SERVER }} "echo 'Test command execution' && ls -la /home/u242329769/domains/staging.kashtre.com/public_html"

      # Step 6: Deploy to Hostinger via SSH
      - name: Deploy to Hostinger
        env:
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        run: |
          # Define deployment directory
          DEPLOY_DIR="/home/u242329769/domains/staging.kashtre.com/public_html"

          # Debug: List local files in GITHUB_WORKSPACE
          echo "Local files in GITHUB_WORKSPACE:"
          ls -la $GITHUB_WORKSPACE

          # Copy files using rsync with sshpass, excluding .env and .htaccess
          sshpass -p "$FTP_PASSWORD" rsync -avz --exclude '.env' --exclude '.htaccess' -e "ssh -p 65002 -o StrictHostKeyChecking=no" $GITHUB_WORKSPACE/ ${{ secrets.FTP_USERNAME }}@${{ secrets.FTP_SERVER }}:"$DEPLOY_DIR"

          # Step 1: Set permissions and create storage link
          sshpass -p "$FTP_PASSWORD" ssh -o StrictHostKeyChecking=no -p 65002 ${{ secrets.FTP_USERNAME }}@${{ secrets.FTP_SERVER }} "cd /home/u242329769/domains/staging.kashtre.com/public_html && echo '✓ Setting permissions...' && chmod -R 755 storage bootstrap/cache 2>/dev/null || echo 'Warning: Could not set permissions' && echo '✓ Removing existing storage link...' && rm -f public/storage && echo '✓ Creating storage link...' && php artisan storage:link"

          # Step 2: Handle migrations safely (preserve existing data)
          sshpass -p "$FTP_PASSWORD" ssh -o StrictHostKeyChecking=no -p 65002 ${{ secrets.FTP_USERNAME }}@${{ secrets.FTP_SERVER }} "cd /home/u242329769/domains/staging.kashtre.com/public_html && echo '✓ Checking existing tables...' && php -r \"use Illuminate\Support\Facades\Schema; use Illuminate\Support\Facades\DB; require 'vendor/autoload.php'; \$app = require 'bootstrap/app.php'; \$app->make('Illuminate\Contracts\Console\Kernel')->bootstrap(); if (Schema::hasTable('transactions') && !DB::table('migrations')->where('migration', '2025_09_05_171600_create_transactions_table')->exists()) { DB::table('migrations')->insert(['migration' => '2025_09_05_171600_create_transactions_table', 'batch' => DB::table('migrations')->max('batch') + 1]); echo 'Marked transactions migration as run (table already exists)'; }\" && echo '✓ Running migrations...' && php artisan migrate --force --verbose && echo '✓ Checking migration status...' && php artisan migrate:status && echo '✓ Clearing and caching...' && php artisan optimize:clear && php artisan view:clear && php artisan config:cache && php artisan route:cache && echo '✓ Deployment completed successfully!'" 