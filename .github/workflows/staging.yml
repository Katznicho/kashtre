name: Deploy Staging Branch to Hostinger (Root)

on:
  push:
    branches:
      - staging

jobs:
  deploy:
    name: Deploy Staging Branch
    runs-on: ubuntu-latest
    env:
      ACTIONS_RUNNER_DEBUG: true
      ACTIONS_STEP_DEBUG: true

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up PHP
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, bcmath, ctype, json, tokenizer, curl
          coverage: none

      # Step 3: Install Composer dependencies
      - name: Install Composer dependencies
        run: composer install --no-dev --optimize-autoloader --no-interaction --ignore-platform-reqs

      # Step 4: Install sshpass
      - name: Install sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass || { echo "Failed to install sshpass"; exit 1; }
          sshpass -v || { echo "sshpass not found after installation"; exit 1; }

      # Step 5: Test SSH Connection
      - name: Test SSH Connection
        run: |
          sshpass -p "${{ secrets.FTP_PASSWORD }}" ssh -o StrictHostKeyChecking=no -p 65002 ${{ secrets.FTP_USERNAME }}@${{ secrets.FTP_SERVER }} whoami
          sshpass -p "${{ secrets.FTP_PASSWORD }}" ssh -o StrictHostKeyChecking=no -p 65002 ${{ secrets.FTP_USERNAME }}@${{ secrets.FTP_SERVER }} "echo 'Test command execution' && ls -la /home/u242329769/domains/staging.kashtre.com/public_html"

      # Step 6: Deploy to Hostinger via SSH
      - name: Deploy to Hostinger
        env:
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        run: |
          # Define deployment directory
          DEPLOY_DIR="/home/u242329769/domains/staging.kashtre.com/public_html"

          # Debug: List local files in GITHUB_WORKSPACE
          echo "Local files in GITHUB_WORKSPACE:"
          ls -la $GITHUB_WORKSPACE

          # Copy files using rsync with sshpass, excluding .env and .htaccess
          sshpass -p "$FTP_PASSWORD" rsync -avz --exclude '.env' --exclude '.htaccess' -e "ssh -p 65002 -o StrictHostKeyChecking=no" $GITHUB_WORKSPACE/ ${{ secrets.FTP_USERNAME }}@${{ secrets.FTP_SERVER }}:"$DEPLOY_DIR"

          # Step 1: Set permissions and create storage link
          sshpass -p "$FTP_PASSWORD" ssh -o StrictHostKeyChecking=no -p 65002 ${{ secrets.FTP_USERNAME }}@${{ secrets.FTP_SERVER }} "cd /home/u242329769/domains/staging.kashtre.com/public_html && echo '✓ Setting permissions...' && chmod -R 755 storage bootstrap/cache 2>/dev/null || echo 'Warning: Could not set permissions' && echo '✓ Creating storage link...' && php artisan storage:link"

          # Step 2: Run migrations and optimize
          sshpass -p "$FTP_PASSWORD" ssh -o StrictHostKeyChecking=no -p 65002 ${{ secrets.FTP_USERNAME }}@${{ secrets.FTP_SERVER }} "cd /home/u242329769/domains/staging.kashtre.com/public_html && echo '✓ Checking migration status...' && php artisan migrate:status && echo '✓ Running migrations with error handling...' && php artisan migrate --force --verbose --path=database/migrations/2025_08_19_141007_create_invoices_table.php || echo 'Invoices table migration failed (may already exist)' && php artisan migrate --force --verbose --path=database/migrations/2025_08_22_150000_create_money_accounts_table.php || echo 'Money accounts table migration failed (may already exist)' && php artisan migrate --force --verbose --path=database/migrations/2025_08_22_150100_create_money_transfers_table.php || echo 'Money transfers table migration failed (may already exist)' && php artisan migrate --force --verbose --path=database/migrations/2025_08_22_150200_create_package_tracking_table.php || echo 'Package tracking table migration failed (may already exist)' && php artisan migrate --force --verbose --path=database/migrations/2025_08_22_151500_modify_money_transfers_allow_null_from_account.php || echo 'From account nullable modification failed (may already exist)' && php artisan migrate --force --verbose --path=database/migrations/2025_08_22_152000_modify_money_transfers_allow_null_to_account.php || echo 'To account nullable modification failed (may already exist)' && echo '✓ Creating missing tables if needed...' && php artisan tinker --execute=\"if (!Schema::hasTable('service_charges')) { echo 'Creating service_charges table...' . PHP_EOL; Schema::create('service_charges', function (\$table) { \$table->id(); \$table->string('entity_type'); \$table->unsignedBigInteger('entity_id'); \$table->string('name'); \$table->decimal('amount', 10, 2); \$table->enum('type', ['fixed', 'percentage']); \$table->text('description')->nullable(); \$table->boolean('is_active')->default(true); \$table->unsignedBigInteger('business_id'); \$table->unsignedBigInteger('created_by'); \$table->timestamps(); \$table->index(['entity_type', 'entity_id']); \$table->index('business_id'); \$table->index('created_by'); \$table->foreign('business_id')->references('id')->on('businesses')->onDelete('cascade'); \$table->foreign('created_by')->references('id')->on('users')->onDelete('cascade'); }); echo 'service_charges table created successfully!' . PHP_EOL; }\" || echo 'Service charges table creation failed (may already exist)' && php artisan tinker --execute=\"if (!Schema::hasTable('contractor_service_charges')) { echo 'Creating contractor_service_charges table...' . PHP_EOL; Schema::create('contractor_service_charges', function (\$table) { \$table->id(); \$table->uuid('uuid')->unique()->index(); \$table->unsignedBigInteger('contractor_profile_id'); \$table->decimal('amount', 10, 2); \$table->decimal('upper_bound', 10, 2)->nullable(); \$table->decimal('lower_bound', 10, 2)->nullable(); \$table->enum('type', ['fixed', 'percentage']); \$table->text('description')->nullable(); \$table->boolean('is_active')->default(true); \$table->unsignedBigInteger('business_id'); \$table->unsignedBigInteger('created_by'); \$table->timestamps(); \$table->softDeletes(); \$table->index('contractor_profile_id'); \$table->index('business_id'); \$table->index('created_by'); \$table->foreign('contractor_profile_id')->references('id')->on('contractor_profiles')->onDelete('cascade'); \$table->foreign('business_id')->references('id')->on('businesses')->onDelete('cascade'); \$table->foreign('created_by')->references('id')->on('users')->onDelete('cascade'); }); echo 'contractor_service_charges table created successfully!' . PHP_EOL; }\" || echo 'Contractor service charges table creation failed (may already exist)' && echo '✓ Modifying service_charges table structure...' && php artisan tinker --execute=\"if (Schema::hasTable('service_charges')) { if (!Schema::hasColumn('service_charges', 'upper_bound')) { Schema::table('service_charges', function (\$table) { \$table->decimal('upper_bound', 10, 2)->nullable()->after('amount'); }); echo 'Added upper_bound column' . PHP_EOL; } if (!Schema::hasColumn('service_charges', 'lower_bound')) { Schema::table('service_charges', function (\$table) { \$table->decimal('lower_bound', 10, 2)->nullable()->after('amount'); }); echo 'Added lower_bound column' . PHP_EOL; } if (Schema::hasColumn('service_charges', 'name')) { Schema::table('service_charges', function (\$table) { \$table->dropColumn('name'); }); echo 'Removed name column' . PHP_EOL; } echo 'service_charges table modifications completed!' . PHP_EOL; }\" || echo 'Service charges table modifications failed' && echo '✓ Clearing and caching...' && php artisan optimize:clear && php artisan view:clear && php artisan config:cache && php artisan route:cache && echo '✓ Deployment completed successfully'" 